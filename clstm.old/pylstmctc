#!/usr/bin/python

#import sys;sys.path.append('/home/tmb/github/ocropy/clstm')

import random as pyrandom
import re
from pylab import *
import os.path
import ocrolib
import argparse
import matplotlib
import numpy
from ocrolib import lineest,edist
import ocrolib.lstm as lstm
import traceback
import h5py

numpy.seterr(divide='raise',over='raise',invalid='raise',under='ignore')

parser = argparse.ArgumentParser("train an RNN recognizer")

parser.add_argument("-r","--lrate",type=float,default=1e-4,
                    help="LSTM learning rate")
parser.add_argument("--momentum",type=float,default=0.9,
                    help="LSTM momentum")
parser.add_argument("-S","--hiddensize",type=int,default=100,
                    help="# LSTM state units")
parser.add_argument("-o","--output",default=None,
                    help="LSTM model file")
parser.add_argument("-F","--savefreq",type=int,default=1000,
                    help="LSTM save frequency")
parser.add_argument("-N","--ntrain",type=int,default=1000000,
                    help="# lines to train before stopping")
parser.add_argument("-t","--tests",default=None,
                    help="test cases for error estimation")
parser.add_argument('--unidirectional',action="store_true",
                    help="use only unidirectional LSTM")
parser.add_argument("-C","--clstm",action="store_true",
                    help="LSTM learning rate")

parser.add_argument("file")
args = parser.parse_args()

h5 = h5py.File(args.file,"r")
print "shape",len(h5["images"]),h5["images_dims"][0]
nlines = len(h5["images"])
print "nlines",nlines
nfeat = int(h5["images_dims"][0][1])
print "nfeat",nfeat
nclass = len(h5["codec"])
print "nclass",nclass

codec = array(h5["codec"],'i')
if args.clstm:
    import clstm
    mylstm = clstm.make_BIDILSTM()
    mylstm.init(nclass,args.hiddensize,nfeat)
    network = clstm.CNetwork(mylstm)
else:
    network = lstm.BIDILSTM(nfeat,args.hiddensize,nclass)
    network.setLearningRate(args.lrate,args.momentum)

network.setLearningRate(args.lrate,0.9)
# if args.updates: network.lstm.verbose = 1

class MovingStats:
    def __init__(self,n=100):
        self.data = []
        self.n = n
        self.count = 0
    def add(self,x):
        self.data += [x]
        self.data = self.data[-self.n:]
        self.count += 1
    def mean(self):
        if len(self.data)==0: return nan
        return mean(self.data)

def cleandisp(s):
    return re.sub('[$]',r'#',s)

ion()
matplotlib.rc('xtick',labelsize=7)
matplotlib.rc('ytick',labelsize=7)
matplotlib.rcParams.update({"font.size":7})

stats = MovingStats(100)

for trial in range(args.ntrain):
    sample = trial % nlines
    line = array(h5["images"][sample].reshape(*tuple(h5["images_dims"][sample])),'f')
    line = array(line*1.0/amax(line),'f')
    print "#",trial,sample,line.shape
    cs = array(h5["transcripts"][sample],'i')
    gt = "".join([chr(codec[x]) for x in cs])
    outputs = array(network.forward(line))
    pcs = lstm.translate_back(outputs)
    pred = "".join([chr(codec[x]) for x in pcs if x!=0])
    targets = lstm.make_target(cs,nclass)
    aligned = array(lstm.ctc_align_targets(outputs,targets))
    acs = lstm.translate_back(aligned)
    gta = "".join([chr(codec[x]) for x in acs if x!=0])
    err = edist.levenshtein(pred,gt) * 1.0/len(gt)
    stats.add(err)
    deltas = aligned - outputs
    network.backward(deltas)
    network.update()
    print "   ERR:",stats.count,stats.mean()
    print "   TRU:",repr(gt)
    print "   ALN:",repr(gta[:len(gt)+5])
    print "   OUT:",repr(pred[:len(gt)+5])
    if trial%20==0:
        clf()
        subplot(411)
        title(cleandisp(gt))
        imshow(line.T,cmap=cm.gray,interpolation='none')
        subplot(412)
        title(cleandisp(gta))
        imshow(aligned.T,cmap=cm.hot,interpolation='none',aspect='auto')
        subplot(413)
        title(cleandisp(pred))
        imshow(outputs.T,cmap=cm.hot,interpolation='none',aspect='auto')
        subplot(414)
        plot(outputs[:,0],color='b')
        plot(outputs[:,1],color='g')
        plot(amax(outputs[:,2:],axis=1),color='r')
        tight_layout()
    ginput(1,0.01)
